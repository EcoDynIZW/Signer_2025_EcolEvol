---
title: "The 4<sup>th</sup> Dimension of Movement"
subtitle: "Movement Paths (simulated tracks)"
author:
  - name: Johannes Signer
    email: jsigner@uni-goettingen.de
  - name: CÃ©dric Scherer
    email: viz@cedricscherer.com
  - name: Stephanie Kramer-Schadt
    email: kramer@izw-berlin.de
date: "`r Sys.Date()`"
format:
    html: 
      theme: flatly
      embed-resources: true
      toc: true
      backgroundcolor: '#ffffff'
knitr:
  opts_chunk:    
    dev: "ragg_png"
    retina: 1
    dpi: 300
execute:
  freeze: auto
  echo: true
  warning: false
  message: false
  cache: true
  fig-width: 7.8
  fig-height: 7.8
editor: source
editor_options:
   chunk_output_type: inline
---

## Preparation

```{r}
#| label: setup
#| cache: false
## packages
library(steppingstone)
library(dplyr)
library(tibble)
library(tidyr)
library(amt)
library(raster)
library(broom)
library(ctmm)
library(here)
library(parallel)

## path + folder for generated landscapes
dir_lscps <- here("data", "simulated", "landscapes")
if (!dir.exists(dir_lscps)) dir.create(dir_lscps, recursive = TRUE)
```


## Simulation Movement Paths

```{r}
#| label: functions-simulation
#| message: false
hpc <- FALSE
n.cores <- 2
r <- 2000

# Functions
sub_track <- function(x, by = 1, len = 1000, start = 1) {
  x[seq(start, by = by, len = len), ] |>
    as_tibble() |>
    mutate(t = ymd_hms("2025-01-01 00:00:00") + minutes(seq(0, by = by, len = len))) |>
    make_track(x, y, t, crs = 3035)
}

fit_mods <- function(x, covars, env) {
  ## RSF
  f <- formula(paste0("case_ ~ ", paste0(covars, collapse = " + ")))
  dat.rsf <- x |> random_points() |> extract_covariates(env)
  m1 <- glm(f, family = binomial(), data = dat.rsf)
  r_rsf <- tidy(m1, conf.int = TRUE) |> filter(term %in% covars) |>
    dplyr::select(term, estimate, low = conf.low, high = conf.high) |>
    mutate(method = "rsf")

  ## wRSF
  t1 <- amt::as_telemetry(x)
  SVF <- variogram(t1)
  GUESS <- ctmm.guess(t1, variogram = SVF, interactive = FALSE)

  # Select the best model
  FIT <- ctmm.select(t1, GUESS, trace = 0)
  ud <- akde(t1, FIT, weights = TRUE)

  crs(env) <- "epsg:3035"
  r.list <- list(
    var1 = if ("var1" %in% covars) env[[1]],
    var2 = if ("var2" %in% covars) env[[2]])
  r.list <- r.list[!map_lgl(r.list, is.null)]

  wRSF <- ctmm:::rsf.fit(t1, UD=ud, R = r.list, error = 0.1)
  r_wrsf <- summary(wRSF)$CI[1:length(r.list), , drop = FALSE]
  r_wrsf <- r_wrsf |> as.tibble() |> mutate(term = rownames(r_wrsf)) |>
    dplyr::select(term, estimate = est, low, high) |>
    mutate(term = map_chr(strsplit(term, " "), 1), method = "wrsf")

  ## SSF
  f <- formula(paste0("case_ ~ ", paste0(covars, collapse = " + "), " + strata(step_id_)"))
  dat.ssf <- x |> steps() |> random_steps() |> extract_covariates(env)
  m3 <- fit_clogit(f, data = dat.ssf)
  r_issf <- tidy(m3$model, conf.int = TRUE) |> filter(term %in% covars) |>
    dplyr::select(term, estimate, low = conf.low, high = conf.high) |>
    mutate(method = "issf")

  bind_rows(
    r_rsf, r_wrsf, r_issf
  )
}
```

```{r}
#| label: simulate-paths
# Set up simulations
set.seed(232)

# Model scenarios
coefs <- expand_grid(
  lscp_var1_ac = 1:3,
  lscp_var2_ac = 1:3,
  var1 = c(2, 0),
  var2 = c(0, -2),
  hr = c(0, -0.01)
)


lscp_rep <- rep(1:10, each = 20)
coefs <- lapply(1:length(lscp_rep), function(i) coefs |>
         mutate(lscp_rep = lscp_rep[i], rep = i)) |>
  bind_rows()

coefs$run_id <- 1:nrow(coefs)
coefs <- filter(coefs, var1 != 0 | var2 != 0)


#res <- mclapply(1:nrow(coefs), function(i) try({
res <- mclapply(1:2, function(i) try({

  cc <- coefs[i, ] |> unlist()

  base_name <- if (hpc) "/home/proj/results/" else here("output", "simulated")
  file_name <- paste0(base_name, "/results_", str_pad(cc["run_id"], 6, pad = "0"), ".rds")
  lscp_path <- if (hpc) "/home/proj/data/landscapes/" else here("data", "simulated", "lanfscapes")
  
  if (!file.exists(file_name)) {

    # Load landscapes
    cont <- read_rds(paste0(lscp_path, "/", cc["lscp_rep"], "/cont.rds"))
    cat <- read_rds(paste0(lscp_path, "/", cc["lscp_rep"], "/cat.rds"))
    d <- read_rds(lscp_path, "/d.rds")

    env <- raster::stack(cont[[cc["lscp_var1_ac"]]],
                         cat[[cc["lscp_var2_ac"]]], d)

    xx <- steppingstone(
      alpha = pm2alpha(0.3),
      omegas = cc[c("var1", "var2", "hr")],
      resources = env,
      n = 1e7,
      rarify_by = 1e2,
      burnin = 0,
      boundary = "reflective",
      xy0 = round(runif(2, r * 0.4, r * 0.6)))$xy

    x3 <- tibble(
      by = c(1, 10, 100),
      data = map(by, ~ sub_track(xx, by = .x))) |>
      mutate(mods = map(data, ~ fit_mods(
        .x, # the data
        covars = c("var1", "var2")[cc[c("var1", "var2")] != 0],  # only take covariates that are non-zero
        env = env))
      )

    x3 <- x3 |> select(by, mods) |> unnest(cols = mods)
    x3 <- bind_cols(x3, coefs[i, ])

      write_rds(x3, file = file_name)
  }
}), mc.cores = n.cores)
```

*** 
  
<details><summary>Session Info</summary>
  
```{r sessionInfo}
git2r::repository()
devtools::session_info()
```

</details>
